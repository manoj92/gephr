version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: humanoid_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-humanoid_secure_pass}
      POSTGRES_DB: humanoid_training
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - humanoid_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: humanoid_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - humanoid_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build: .
    container_name: humanoid_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-humanoid_secure_pass}@db:5432/humanoid_training
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-super_secret_key_change_in_production}
      - API_V1_STR=/api/v1
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","https://app.gephrlabs.com","https://gephrlabs.com"]
      - ENABLE_ML_PROCESSING=true
      - ENABLE_HAND_TRACKING=true
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - uploads_data:/app/uploads
      - models_data:/app/models
      - logs_data:/app/logs
    networks:
      - humanoid_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: humanoid_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    networks:
      - humanoid_network
    depends_on:
      - backend

  # Celery Worker for Background Tasks
  celery_worker:
    build: .
    container_name: humanoid_celery_worker
    restart: unless-stopped
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-humanoid_secure_pass}@db:5432/humanoid_training
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY:-super_secret_key_change_in_production}
    volumes:
      - uploads_data:/app/uploads
      - models_data:/app/models
      - logs_data:/app/logs
    networks:
      - humanoid_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  models_data:
    driver: local
  logs_data:
    driver: local

networks:
  humanoid_network:
    driver: bridge